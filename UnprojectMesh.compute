/*
 * Hardware Depth Unprojector (compute shader)
 * 
 * Copyright 2020 (C) Bartosz Meglicki <meglickib@gmail.com>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Compute shader for unprojecting depth map and color map to dense point cloud.
 * The result is stored in AppendStructureBuffer.
 *
 * This is Unity flavour HLSL. You may recompile it with Unity for OpenGL, Vulkan etc.
 */

#pragma kernel UnprojectMeshKernel

#include "UnityCG.cginc"

// long stringy depthy triangles are probably connecting a hand in front to a face behind or something, so don't draw them
#define MAX_TRIANGLE_DEPTH 0.0006f

 // any depth points smaller than the ZERO_CUTOFF and all the zero depth points are drawn
#define ZERO_CUTOFF 0.0079f

CBUFFER_START(UnprojectionArgs)
    float3 UnprojectionMultiplier; //max distance * [1/fx, 1/fy, 1]
    float PPX; //principal point x pixel coordinates (center of projection)
    float PPY; //principal point y pixel coordinates (center of projection)
    float MinDistance; //in [0, 1], min valid distance divided by max distance, 0 accepts any
    float MaxDistance; //in [0, 1], max valid distance divided by max distance, 1 accepts any
    uint WidthMinus1; // one less than the width of the depth texture (i.e. last addressable pixel)
    uint HeightMinus1; // one less than the height of the depth texture (i.e. last addressable pixel)
CBUFFER_END

Texture2D<float> depthTexture; //normalised float in [0, 1] where 1 corresponds to max distance (2^16 * distance_unit e.g. 0.00025m = 16.384m)

struct VertexData
{
    float4 position;
    uint2 uv;  // actual pixel coords, not [0..1]
};

struct TriangleData
{
    VertexData vertices[3];
};

AppendStructuredBuffer<TriangleData> vertices;

[numthreads(8,8,1)]
void UnprojectMeshKernel (uint3 id : SV_DispatchThreadID)
{
    // do nothing for last row/last column
    if (id.x == WidthMinus1 || id.y == HeightMinus1)
    {
        return;
    }

    // depth
    float d1 = depthTexture[id.xy];
    float d2 = depthTexture[int2(id.x + 1, id.y)];
    float d3 = depthTexture[int2(id.x+1, id.y+1)];
    float d4 = depthTexture[int2(id.x, id.y+1)];

    // scale depth and add offset from camera
    (d1 > ZERO_CUTOFF) ? d1 = d1 / 64.0f + (512.0f / 65536.0f) : 0.0f;
    (d2 > ZERO_CUTOFF) ? d2 = d2 / 64.0f + (512.0f / 65536.0f) : 0.0f;
    (d3 > ZERO_CUTOFF) ? d3 = d3 / 64.0f + (512.0f / 65536.0f) : 0.0f;
    (d4 > ZERO_CUTOFF) ? d4 = d4 / 64.0f + (512.0f / 65536.0f) : 0.0f;

    // if diagonal vertices are effectively zero, or if they're far apart in depth
    if (d1 < ZERO_CUTOFF || d3 < ZERO_CUTOFF || abs(d1 - d3) > MAX_TRIANGLE_DEPTH)
    {
        // neither triangle should be drawn
        return;
    }

    // unprojection matrix
    float3 up1 = { id.x - PPX, PPY - id.y, 1 };
    float3 up3 = { id.x + 1 - PPX, PPY - (id.y + 1), 1 };
    // position
    float4 p1 = float4(d1 * up1 * UnprojectionMultiplier, 1);
    float4 p3 = float4(d3 * up3 * UnprojectionMultiplier, 1);

    // defer YUV->RGB to fragment shader, just pass through texture uvs here as id.xy (not scaled to [0..1])
    VertexData v1 = { p1, uint2(id.x, id.y) };
    VertexData v3 = { p3, uint2(id.x + 1, id.y + 1) };

    // if top-right vertex is a proper depth and if it's close enough in depth from the other two
    if (d2 > ZERO_CUTOFF && abs(d2 - d1) < MAX_TRIANGLE_DEPTH && abs(d2 - d3) < MAX_TRIANGLE_DEPTH)
    {
        // we at least have the top-right triangle
        float3 up2 = { id.x + 1 - PPX, PPY - id.y, 1 };
        float4 p2 = float4(d2 * up2 * UnprojectionMultiplier, 1);

        VertexData v2 = { p2, uint2(id.x + 1, id.y) };

        // place the top-right triangle in the vertex buffer
        TriangleData t = { v1, v2, v3 };
        vertices.Append(t);
    }

    // if bottom-left vertex is a proper depth and if it's close enough in depth from the other two
    if (d4 > ZERO_CUTOFF && abs(d4 - d1) < MAX_TRIANGLE_DEPTH && abs(d4 - d3) < MAX_TRIANGLE_DEPTH)
    {
        // we at least have the bottom-left triangle
        float3 up4 = { id.x - PPX, PPY - (id.y + 1), 1 };
        float4 p4 = float4(d4 * up4 * UnprojectionMultiplier, 1);

        VertexData v4 = { p4, uint2(id.x, id.y + 1) };

        // place the bottom-left triangle in the vertex buffer
        TriangleData t = { v4, v1, v3 };
        vertices.Append(t);
    }
}

// some slight faffing because compute shader must append full triangle (3 verts) at a time
// to render correctly, but this means the appendbuffer count is 3 times smaller than it 
// needs to be, so we have to invoke another very short compute shader before the vertex shader
#pragma kernel FixupIndirectArgs

struct DrawCallArgsBuffer
{
    uint vertexCountPerInstance;
    uint instanceCount;
    uint startVertexLocation;
    uint startInstanceLocation;
};

RWStructuredBuffer<DrawCallArgsBuffer> DrawCallArgs;

[numthreads(1, 1, 1)]
void FixupIndirectArgs(uint3 id : SV_DispatchThreadID)
{
    DrawCallArgs[0].vertexCountPerInstance *= 3;
}
